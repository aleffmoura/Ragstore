// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Totten.Solution.Ragstore.Infra.Data.Contexts.StoreContexts;

#nullable disable

namespace Totten.Solution.Ragstore.Infra.Data.Migrations.RagnaStore
{
    [DbContext(typeof(RagnaStoreContext))]
    partial class RagnaStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BaseLevel")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("ClothesColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GuildId")
                        .HasColumnType("int");

                    b.Property<string>("GuildName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuildPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HairColorId")
                        .HasColumnType("int");

                    b.Property<int?>("HairId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadBottomId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadMiddleId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadTopId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RobeId")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("ShieldId")
                        .HasColumnType("int");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Chats.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsPublic")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityUsers")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.ItemAgreggation.EquipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("CrafterId")
                        .HasColumnType("int");

                    b.Property<string>("CrafterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnchantGrade")
                        .HasColumnType("int");

                    b.Property<string>("InfoCards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDamaged")
                        .HasColumnType("int");

                    b.Property<int>("IsIdentified")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Refine")
                        .HasColumnType("int");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<int?>("SpriteId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("EquipmentItems", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.ItemAgreggation.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Slots")
                        .HasColumnType("int");

                    b.Property<string>("SubType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Buyings.BuyingStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterId");

                    b.ToTable("BuyingStores", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Buyings.BuyingStoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BuyingStoreId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("CrafterId")
                        .HasColumnType("int");

                    b.Property<string>("CrafterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnchantGrade")
                        .HasColumnType("int");

                    b.Property<string>("InfoCards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDamaged")
                        .HasColumnType("int");

                    b.Property<int>("IsIdentified")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Refine")
                        .HasColumnType("int");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<int?>("SpriteId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BuyingStoreId")
                        .IsUnique();

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("BuyingStoreItems", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Vendings.VendingStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterId");

                    b.ToTable("VendingStores", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Vendings.VendingStoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("CrafterId")
                        .HasColumnType("int");

                    b.Property<string>("CrafterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnchantGrade")
                        .HasColumnType("int");

                    b.Property<long?>("ExpireDate")
                        .HasColumnType("bigint");

                    b.Property<string>("InfoCards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDamaged")
                        .HasColumnType("int");

                    b.Property<int>("IsIdentified")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Location")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Refine")
                        .HasColumnType("int");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<int?>("SpriteId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendingStoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendingStoreId");

                    b.ToTable("VendingStoreItems", (string)null);
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Characters.Character", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Chats.Chat", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", "Account")
                        .WithMany("Chats")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Characters.Character", "Character")
                        .WithMany("Chats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.ItemAgreggation.EquipmentItem", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", "Account")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Characters.Character", "Character")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Chats.Chat", "Chat")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.ItemAgreggation.Item", "Item")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Character");

                    b.Navigation("Chat");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Buyings.BuyingStore", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", "Account")
                        .WithMany("BuyingStores")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Characters.Character", "Character")
                        .WithMany("BuyingStores")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Buyings.BuyingStoreItem", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", "Account")
                        .WithMany("BuyingStoreItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Buyings.BuyingStore", "BuyingStore")
                        .WithOne("BuyingStoreItem")
                        .HasForeignKey("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Buyings.BuyingStoreItem", "BuyingStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Characters.Character", "Character")
                        .WithMany("BuyingStoreItems")
                        .HasForeignKey("CharacterId")
                        .HasPrincipalKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.ItemAgreggation.Item", "Item")
                        .WithMany("BuyingStoreItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("BuyingStore");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Vendings.VendingStore", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", "Account")
                        .WithMany("VendingStores")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Characters.Character", "Character")
                        .WithMany("VendingStores")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Vendings.VendingStoreItem", b =>
                {
                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", "Account")
                        .WithMany("VendingStoreItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.Characters.Character", "Character")
                        .WithMany("VendingStoreItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.ItemAgreggation.Item", "Item")
                        .WithMany("VendingStoreItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Vendings.VendingStore", "VendingStore")
                        .WithMany("VendingStoreItems")
                        .HasForeignKey("VendingStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Character");

                    b.Navigation("Item");

                    b.Navigation("VendingStore");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Accounts.Account", b =>
                {
                    b.Navigation("BuyingStoreItems");

                    b.Navigation("BuyingStores");

                    b.Navigation("Characters");

                    b.Navigation("Chats");

                    b.Navigation("EquipmentItems");

                    b.Navigation("VendingStoreItems");

                    b.Navigation("VendingStores");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Characters.Character", b =>
                {
                    b.Navigation("BuyingStoreItems");

                    b.Navigation("BuyingStores");

                    b.Navigation("Chats");

                    b.Navigation("EquipmentItems");

                    b.Navigation("VendingStoreItems");

                    b.Navigation("VendingStores");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.Chats.Chat", b =>
                {
                    b.Navigation("EquipmentItems");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.ItemAgreggation.Item", b =>
                {
                    b.Navigation("BuyingStoreItems");

                    b.Navigation("EquipmentItems");

                    b.Navigation("VendingStoreItems");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Buyings.BuyingStore", b =>
                {
                    b.Navigation("BuyingStoreItem");
                });

            modelBuilder.Entity("Totten.Solution.Ragstore.Domain.Features.StoresAgreggation.Vendings.VendingStore", b =>
                {
                    b.Navigation("VendingStoreItems");
                });
#pragma warning restore 612, 618
        }
    }
}
